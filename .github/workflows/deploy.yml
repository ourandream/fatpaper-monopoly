name: Trigger auto deployment for Azure Container App

on:
  push:
    branches: 
      [ main-p2p ] 
    paths:
      - '**'
      - '.github/workflows/deploy.yml'

  workflow_dispatch:      

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
      packages: write # Required to push to GitHub Container Registry

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive # Fetch Git submodules

      # Login to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Images
        run: |
          docker compose -f ./docker-compose-local.yml -p fatpapersite build
      
      - name: List Docker Images
        run: docker images
      
      - name: Tag Docker Images
        run: |
          docker tag fatpaper/fatpaper-web ghcr.io/${{ github.repository }}/fatpapersite:${{ github.sha }}


      # Push Docker images to GHCR
      - name: Push Docker Images to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}/fatpapersite:${{ github.sha }}
          
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.TEST_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.TEST_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.TEST_AZURE_SUBSCRIPTION_ID }}

      # Deploy to Azure Container Apps
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: test
          resourceGroup: test_1
          imageToDeploy: ghcr.io/${{ github.repository }}/fatpapersite:${{ github.sha }}
          registryUrl: ghcr.io
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: 80
